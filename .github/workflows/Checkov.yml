# vars.PCC_CONSOLE_URL
# vars.PRISMA_API_URL
# secrets.PC_ACCESS_KEY
# secrets.PC_SECRET_KEY
name: Prisma Cloud Checks
on:
  pull_request:
  push:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: demo:latest

jobs:
  build-and-scan-image:
    name: Build & scan image
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # For SARIF

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0        
     
      #- name: Run yor action
      #  uses: bridgecrewio/yor-action@main     
        
      - name: Run Prisma Cloud 
        id: prisma-cloud
        uses: bridgecrewio/checkov-action@master
        env:
          PRISMA_API_URL: https://api.ind.prismacloud.io
        with:
          api-key: ${{ secrets.PC_ACCESS_KEY }}::${{ secrets.PC_SECRET_KEY }}
          #use_enforcement_rules: true # optional - use enforcement rule configs from the platform
          
      - name: Build the image
        run: docker build -t $IMAGE_NAME .

      #- name: Container Image Scan
       # id: scan
        #uses: PaloAltoNetworks/prisma-cloud-scan@v1
        #with:
         # pcc_console_url: ${{ vars.PCC_CONSOLE_URL }}
         # pcc_user: ${{ secrets.PC_ACCESS_KEY }}
          #pcc_pass: ${{ secrets.PC_SECRET_KEY }}
          #image_name: ${{ env.IMAGE_NAME }}

      - name: Upload SARIF report
        uses: actions/upload-artifact@v2
        with:
          name: SARIF results twistcli
          path: ${{ steps.scan.outputs.sarif_file }}

      # # Only for public repos or enterprise accounts
      # # (Optional) for compatibility with GitHub's code scanning alerts
      # - name: Upload SARIF file
      #   if: ${{ always() }} # necessary if using failure thresholds in the image scan
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: ${{ steps.scan.outputs.sarif_file }}



  checkov-scan:
    name: Scan Repo with checkov
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write  # For SARIF

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Run Bridgecrew Action
        id: Bridgecrew
        uses: bridgecrewio/checkov-action@master
        env:
          PRISMA_API_URL: ${{ vars.PRISMA_API_URL }}
        with:
          api-key: ${{ secrets.PC_ACCESS_KEY }}::${{ secrets.PC_SECRET_KEY }}
          
          
      - name: Upload SARIF report
        uses: actions/upload-artifact@v2
        with:
          name: SARIF results Checkov
          path: results.sarif

      # Only for public repos or enterprise accounts
      # Uploads results.sarif to GitHub repository using the upload-sarif action
      - uses: github/codeql-action/upload-sarif@v2
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: results.sarif
